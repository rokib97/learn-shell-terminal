1. echo
    Purpose: The echo command outputs text or variables to the terminal.
    Usage:
        echo "Hello, World!" → Outputs: Hello, World!
        echo $VARIABLE_NAME → Prints the value of a variable.
    Options:
        -n → Suppresses the trailing newline.
        -e → Enables interpretation of escape characters (e.g., \n, \t).

2. Command Line vs. GUI
   Command Line:
    Text-based interface where users type commands to perform tasks.
        Pros: Faster, scriptable, less resource-intensive.
        Cons: Requires memorizing commands and syntax.
    GUI (Graphical User Interface):
    Visual, interactive interface with icons, buttons, and windows.
        Pros: User-friendly, no command knowledge needed.
        Cons: Slower for repetitive tasks, resource-intensive.

3. Terminal, Shell, and CLI
    Terminal: A program that provides a text-based interface for interacting with the shell (e.g., GNOME Terminal, Windows Terminal).
    Shell: The command interpreter that executes user commands (e.g., Bash, Zsh, PowerShell).
    CLI (Command Line Interface): The overall interface for running commands and scripts, typically accessed via a terminal.


4. Variables
Definition: Variables store data for reuse in scripts and commands.
    Creating a Variable:
    VAR_NAME=value (No spaces around =).
    Accessing a Variable:
    Use $ before the variable name (e.g., echo $VAR_NAME).
        Example:

        NAME="John"
        echo "Hello, $NAME!" # Outputs: Hello, John!

Environment Variables:
    System-wide variables (e.g., $PATH, $HOME).
    Use export VAR_NAME=value to make a variable global.


5. Command History
    Definition: A record of previously entered commands.
    Usage:
    history → Displays the command history.
    !<number> → Runs a specific command from the history by its number.
    Arrow keys for navigation.

6. History Navigation
Keyboard Shortcuts:
    ↑ / ↓ → Navigate through the history.
    Ctrl + R → Search backward interactively.
    Ctrl + S → Search forward interactively (may need enabling in some shells).
    History Expansion:
    !! → Repeats the last command.
    !<prefix> → Runs the most recent command starting with <prefix>.
    !$ → Uses the last argument of the previous command.